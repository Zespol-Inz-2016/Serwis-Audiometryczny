@model SerwisAudiometryczny.Models.AudiogramDisplayViewModel

@{
    ViewBag.Title = "Szczegóły audiogramu";
}

<style>
    #LeftEarLevels > div:nth-child(1),
    #RightEarLevels > div:nth-child(1){
        //display: none;
    }
    .dl-horizontal > dt:nth-child(3){
        color: blue;
    }
    .dl-horizontal > dt:nth-child(5){
        color: red;
    }
    div.le{
        color:#0600FF;
        background-color:#E4E4E4;
    }
    div.ri{
        background-color:#E4E4E4;
    }
    dd{
        margin-bottom: 3px;
    }
    .col-sm-11{
        background-color: rgba(0, 0, 0, 0.5);
        margin-bottom: 12px;
    }
</style>

<h2>Szczegóły audiogramu</h2>

<div>
    <hr />
    <div class="row">
        <div class="col-sm-11 col-lg-6 col-md-6 col-xs-11">
            <dl class="dl-horizontal">
                <dt></dt>
                <dd>
                    @foreach (var item in Model.Frequencies)
                    {
                        <div class="codec freq-code code-elems"></div>
                    }
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.LeftEar)
                </dt>

                <dd id="LeftEarLevels">
                    @foreach (var left in Model.Audiogram.LeftEar.Levels)
                    {
                        <div class="codec le code-elems">@left</div>
                    }
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.RightEar)
                </dt>

                <dd id="RightEarLevels">
                    @foreach (var right in Model.Audiogram.RightEar.Levels)
                    {
                        <div class="codec ri code-elems">@right</div>
                    }
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.Diagnosis)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Audiogram.Diagnosis)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.Gender)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Audiogram.Gender)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.Nuisance)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Audiogram.Nuisance)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.Age)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Audiogram.Age)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.PercentageHearingLoss)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Audiogram.PercentageHearingLoss)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.IsMusician)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Audiogram.IsMusician)
                </dd>

                <dt class="instrument">
                    @Html.DisplayNameFor(model => model.Audiogram.Instrument)
                </dt>

                <dd class="instrument">
                    @Html.DisplayFor(model => model.Audiogram.Instrument.Name)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.PatientID)
                </dt>
                
                <dd>
                    @Html.DisplayFor(model => model.Audiogram.PatientID)
                </dd>
                @if (Model.ShowPatientData)
                {
                    <dt>
                        @Html.DisplayNameFor(model => model.Patient.Decrypted.Name)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Patient.Decrypted.Name)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Patient.Decrypted.Email)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Patient.Decrypted.Email)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Patient.Decrypted.Address)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Patient.Decrypted.Address)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Patient.Decrypted.PhoneNumber)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Patient.Decrypted.PhoneNumber)
                    </dd>
                }
                <dt>
                    @Html.DisplayNameFor(model => model.Audiogram.EditorID)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Audiogram.EditorID)
                </dd>
                @if (Model.ShowEditorData)
                {
                    <dt>
                        @Html.DisplayNameFor(model => model.Editor.Decrypted.Name)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Editor.Decrypted.Name)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Editor.Decrypted.Email)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Editor.Decrypted.Email)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Editor.Decrypted.Address)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Editor.Decrypted.Address)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Editor.Decrypted.PhoneNumber)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Editor.Decrypted.PhoneNumber)
                    </dd>
                }
            </dl>
                <script>
                    var elems_for_letters = document.querySelectorAll('dt');
                    for (var i = 0; i < elems_for_letters.length; i++) {
                        elems_for_letters[i].innerHTML = elems_for_letters[i].innerHTML.replace(/([a-z])([A-Z])/g, '$1 $2');
                    }
                </script>
        </div>
        <div class="col-sm-12 col-lg-6 col-md-6 col-xs-12">
            <div id="graf">
                <canvas id="ag" width="600" height="500" style="border:1px solid black;"></canvas>
            </div>
        </div>
    </div>
</div>
<p>
    @Html.ActionLink("Edytuj", "Edit", new { id = Model.Audiogram.ID }) |
    @Html.ActionLink("Powrót do listy", "Index")
</p>

<script>

	function AG(config){
		// właściwości definiowane przez użytkownika
		this.canvas = document.getElementById(config.canvasId);
		this.minX = config.minX;
		this.minY = config.minY;
		this.maxX = config.maxX;
		this.maxY = config.maxY;
		this.unitsPerTickX = config.unitsPerTickX;
		this.unitsPerTickY = config.unitsPerTickY;
		this.checkpointX = config.checkpointX;
		this.checkpointY = config.checkpointY;


		// stałe
		this.padding = 10;
		this.tickSize = 10;
		this.axisColor = "#d3d3d3";
		this.pointRadius = 5;
		this.font = "12pt Calibri";
		this.numXTicks = this.checkpointX.length;
		this.numYTicks = this.checkpointY.length;

		/*
		 * metoda measureText nie dostarcza informacji
		 * o wysokości tekstu, zatem będziemy musieli podać
		 * jej wartość
		 */
		this.fontHeight = 12;

		// zależności
		this.context = this.canvas.getContext("2d");
		this.rangeX = this.maxX - this.minY;
		this.rangeY = this.maxY - this.minY;
		this.x = this.getLongestValueWidth() + this.padding * 2;
		this.y = this.padding * 2;
		this.width = this.canvas.width - this.x - this.padding * 2;
		this.height = this.canvas.height - this.y - this.padding - this.fontHeight;
		this.scaleX = this.width / this.rangeX;
		this.scaleY = this.height / this.rangeY;
		this.reverse = false;

		// rysujemy osie x i y wraz z kreseczkami ich wartości
		this.drawXAxis();
		this.drawYAxis();
	}

	AG.prototype.getLongestValueWidth = function(){
		this.context.font = this.font;
		var longestValueWidth = 0;
		for (var n = 0; n <= this.numYTicks; n++) {
			var value = this.maxY - (n * this.unitsPerTickY);
			longestValueWidth = Math.max(longestValueWidth, this.context.measureText(value).width);
		}
		return longestValueWidth;
	};

	AG.prototype.drawXAxis = function(){
		var context = this.context;
		context.save();
		context.beginPath();
		context.moveTo(this.x, this.y + this.height);
		context.lineTo(this.x + this.width, this.y + this.height);
		context.strokeStyle = this.axisColor;
		context.lineWidth = 2;
		context.stroke();

		// kreseczki wartości osi
		for (var n = 0; n < this.numXTicks; n++) {
			context.beginPath();
			context.moveTo((n + 1) * this.width / this.numXTicks + this.x, this.y + this.height);
			context.lineTo((n + 1) * this.width / this.numXTicks + this.x, this.y + this.height - this.height);
			context.stroke();
		}

		// etykiety wartości
		context.font = this.font;
		context.fillStyle = "black";
		context.textAlign = "center";
		context.textBaseline = "middle";

		for (var n = 0; n < this.numXTicks; n++) {
			context.save();
			context.translate((n + 1) * this.width / this.numXTicks + this.x, this.y + this.height + this.padding);
			context.fillText(this.checkpointX[n], 0, 0);
			context.restore();
		}
		context.restore();
	};

	AG.prototype.drawYAxis = function(){
		var context = this.context;
		context.save();
		context.save();
		context.beginPath();
		context.moveTo(this.x, this.y);
		context.lineTo(this.x, this.y + this.height);
		context.strokeStyle = this.axisColor;
		context.lineWidth = 2;
		context.stroke();
		context.restore();



		// kreseczki wartości osi
		for (var n = 0; n < this.numYTicks; n++) {
			context.beginPath();
			context.moveTo(this.x, n * this.height / this.numYTicks + this.y);
			context.lineTo(this.x + this.width, n * this.height / this.numYTicks + this.y);
			context.stroke();
		}

		// etykiety wartości
		context.font = this.font;
		context.fillStyle = "black";
		context.textAlign = "right";
		context.textBaseline = "middle";

		for (var n = 0; n < this.numYTicks; n++) {
			var value = Math.round(this.maxY - n * this.maxY / this.numYTicks);
			context.save();
			context.translate(this.x - this.padding, n * this.height / this.numYTicks + this.y);
			context.fillText(this.checkpointY[n], 0, 0);
			context.restore();
		}
		var value = Math.round(this.maxY - this.numYTicks * this.maxY / this.numYTicks);
		context.save();
		context.translate(this.x - this.padding, this.numYTicks * this.height / this.numYTicks + this.y);
		context.fillText("[dB]", 0, 0);
		context.restore();
		context.restore();
	};

	AG.prototype.drawLine = function(data, color, width) {
		var x = function(point){
			var coord = point.y;
			if (coord == 0) {
				coord = 130;
			} else {
				if (coord < 0) {
					coord = (-coord + 130);
				} else {
					coord = (-coord + 130);
				}
			}
			return coord;
		}
		var context = this.context;
		context.save();
		this.transformContext();
		context.lineWidth = width;
		context.strokeStyle = color;
		context.fillStyle = color;
		context.beginPath();

		context.moveTo((this.unitsPerTickX + width) * (n+1) * (this.scaleX) - (1 * n), x(data[0]) * this.scaleY);

		for (var n = 0; n < data.length; n++) {
			var point = data[n];

			// segment linii
			context.lineTo((this.unitsPerTickX) * (n+1) * (this.scaleX), x(point) * this.scaleY);
			context.stroke();
			context.closePath();
			context.beginPath();
			context.arc(
					(this.unitsPerTickX) * (n+1) * (this.scaleX),
					x(point) * this.scaleY,
					this.pointRadius, 0, 2 * Math.PI,
					false
				);
			context.fill();
			context.closePath();

			// początek następnego segmentu
			context.beginPath();
			context.moveTo((this.unitsPerTickX) * (n+1) * (this.scaleX), x(point) * this.scaleY);
		}
		context.restore();
	};

	AG.prototype.transformContext = function(){
		var context = this.context;

		// przesunięcie kontekstu do środka obszaru elementu canvas
		this.context.translate(this.x, this.y + this.height);

		// odwrócenie kierunku osi y, tak by jej wartości
		// rosły ku górze
		context.scale(1, -1);
	};

	window.onload = function(){


	    var HEARLVL = new Array();

        @foreach(var lel in Model.Audiogram.LeftEar.Levels)
        {
            <text>HEARLVL.push(@lel);</text>
        }
	    console.log("HEARLVL " + HEARLVL);

        var _maxX = HEARLVL.length;

        var frequ = [];
        @foreach (var freq in Model.Frequencies) {<text>frequ.push(@freq);</text>}
	    frequ.sort(function (a, b) { return a - b }).push("[HZ]");

		var myAG = new AG({
		    canvasId: "ag",
		    minX: 0,
		    minY: 0,
		    maxX: (@Model.Frequencies.Length + 1) * 10,
		    maxY: 15 * 10,
		    unitsPerTickX: 10,
		    unitsPerTickY: 10,
            checkpointX: frequ,
		    //checkpointX: [125, 250, 500, 750, 1000, 1500, 2000, 3000, 4000, 6000, 8000, ""],
		    checkpointY: [-20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]

        });
	    var _chp = [@foreach (var freq in Model.Frequencies) {<text>@freq,</text> }];
		var data = [];
		for (var i = 0; i < HEARLVL.length; i++) {
		    data.push({ x: _chp[i], y: HEARLVL[i] })
		}
		/*var data = [{ x:  czestotliwosc, y: poziom },{ x:  itd, y: itd }];*/
		myAG.drawLine(data, "blue", 3);

		HEARLVL = [];
		data = [];

        @foreach(var rer in Model.Audiogram.RightEar.Levels)
		{
		    <text>HEARLVL.push(@rer);</text>
		}
	    console.log("HEARLVL " + HEARLVL);


	    for (var i = 0; i < HEARLVL.length; i++) {
	        data.push({ x: _chp[i], y: HEARLVL[i] })
		}
		myAG.drawLine(data, "red", 3);
	};
    if (!document.getElementsByClassName('check-box')[0].checked) {
        document.getElementsByClassName('instrument')[0].style.display = "none";
        document.getElementsByClassName('instrument')[1].style.display = "none";
    }
</script>
<script>
    var frequens = [];
    @foreach (var freq in Model.Frequencies) {<text>frequens.push(@freq);</text>}
    frequens.sort(function (a, b) { return a - b });
    for (var i = 0; i < frequens.length ; i++) {
        document.getElementsByClassName('code-elems')[i].innerHTML = frequens[i];
    }
</script>
