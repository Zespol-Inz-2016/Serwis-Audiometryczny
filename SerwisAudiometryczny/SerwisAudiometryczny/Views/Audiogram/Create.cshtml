@model SerwisAudiometryczny.Models.AudiogramCreateEditViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<style>
    .form-adv{
        display: inline;
        width: 70px;
    }
    .form-none{
        display: none;
    }
    .musician-depended{
        display: none;
    }
</style>
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>AudiogramModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.LeftEar.Levels, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Audiogram.LeftEar, new { htmlAttributes = new { @class = "form-control form-none form-final-left" } })
                @for (var i = 0; i < Model.Frequencies.Length ; i++)
                {<input class="form-control form-adv form-left" max="120" min="-10" type="number"/> }
                @Html.ValidationMessageFor(model => model.Audiogram.LeftEar, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.RightEar, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Audiogram.RightEar, new { htmlAttributes = new { @class = "form-control form-none form-final-right" } })
                @for (var i = 0; i < Model.Frequencies.Length; i++)
                {<input class="form-control form-adv form-right" type="number"/> }
                @Html.ValidationMessageFor(model => model.Audiogram.RightEar, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.Diagnosis, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Audiogram.Diagnosis, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Audiogram.Diagnosis, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Audiogram.Gender, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Audiogram.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.Nuisance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Audiogram.Nuisance, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Audiogram.Nuisance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Audiogram.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Audiogram.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.PercentageHearingLoss, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Audiogram.PercentageHearingLoss, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Audiogram.PercentageHearingLoss, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.IsMusician, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Audiogram.IsMusician)
                    @Html.ValidationMessageFor(model => model.Audiogram.IsMusician, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group musician-depended">
            @Html.LabelFor(model => model.Audiogram.Instrument, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    <input class="text-box single-line" id="Instrument_Name" name="Instrument.Name" type="text" value="">
                    <input class="text-box single-line" data-val="true" data-val-number="The field ID must be a number."
                           data-val-required="Pole ID jest wymagane." id="Instrument_ID" name="Instrument.ID" type="number" value="">
                    <span class="field-validation-valid text-danger" data-valmsg-for="Instrument_ID" data-valmsg-replace="true"></span>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.PatientID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Audiogram.PatientID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Audiogram.PatientID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Audiogram.EditorID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Audiogram.EditorID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Audiogram.EditorID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input return="val();" type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $('#IsMusician').on('change', function () {
            alert('do dokonczenia - sprawdzanie instrumentow + pickowanie + dodawanie')
            if (document.getElementById('IsMusician').checked) {
                $('.musician-depended').show();
            } else {
                $('.musician-depended').hide();
            }
        })

        $('form').on('submit', function () {
            alert('do dodania customowa walidacja pol - na koniec to zrobie')
            alert('przeniesc jeszcze wszystko na form do edycji trzeba bedzie')
            //return false;
        })

        var LeftFinal = document.getElementsByClassName('form-final-left')[0];
        var RightFinal = document.getElementsByClassName('form-final-right')[0];
        function functionLeft() {
            var allElements = document.getElementsByClassName('form-left');
            var string = "";
            for (var i = 0; i < allElements.length; i++) {
                if (i == 0) { string = allElements[i].value + ";"; }
                else {
                    if (i == allElements.length - 1) { string = string + allElements[i].value; }
                    else {
                        string = string + allElements[i].value + ";";
                    }
                }
            }
            LeftFinal.value = string;
        }
        function functionRight() {
            var allElements = document.getElementsByClassName('form-right');
            var string = "";
            for (var i = 0; i < allElements.length; i++) {
                if (i == 0) { string = allElements[i].value + ";"; }
                else {
                    if (i == allElements.length - 1) { string = string + allElements[i].value; }
                    else {
                        string = string + allElements[i].value + ";";
                    }
                }
            }
            RightFinal.value = string;
        }
        var left = document.getElementsByClassName('form-left');
        for (var i = 0; i < left.length; i++) {
            left[i].addEventListener('keyup', functionLeft, false);
            left[i].addEventListener('change', functionLeft, false);
        }
        var right = document.getElementsByClassName('form-right');
        for (var i = 0; i < right.length; i++) {
            right[i].addEventListener('keyup', functionRight, false);
            right[i].addEventListener('change', functionRight, false);
        }
    </script>
}
